{"version":3,"file":"static/js/186.f80228fb.chunk.js","mappings":"yNA+CI,UA3CY,WACZ,OAAwBA,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAEOC,GAAWC,EAAAA,EAAAA,MAAXD,QAiBP,OAfAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAO,mCAAG,sGAERJ,GAAW,GAFH,UAGgBK,EAAAA,EAAAA,IAAgBJ,GAHhC,gBAGDK,EAHC,EAGDA,QACPR,EAAQQ,GACRN,GAAW,GALH,kDAORO,QAAQC,IAAR,MAPQ,yBASRR,GAAW,GATH,6EAAH,qDAYbI,GACH,GAAE,CAACH,KAEA,8BACGF,EACC,aACEF,GAAQA,EAAKY,OAAS,GACxB,0BACE,wBACGZ,EAAKa,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,GAApB,OACR,2BACE,uBAAIF,IACHC,GAAWA,IAFLC,EADD,SASd,6CAIP,C,sLC3CCC,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAO,CACHC,QAAS,mCACTC,SAAU,WAIX,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,wHAGsBP,EAASQ,IAH/B,uBAG0C,CACzCL,OAAQ,CACNI,KAAAA,KALH,uBAGOxB,EAHP,EAGOA,KAHP,kBASMA,GATN,2HAeE,SAAe0B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BV,GAA/B,kFACCW,EADD,iBACmBX,GADnB,kBAGoBC,EAASQ,IAAIE,GAHjC,uBAGK3B,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAe4B,EAAtB,+CAAO,OAAP,oBAAO,WAA4BZ,GAA5B,kFACCW,EADD,iBACmBX,EADnB,8BAGoBC,EAASQ,IAAIE,GAHjC,uBAGK3B,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAeQ,EAAtB,+CAAO,OAAP,oBAAO,WAA+BQ,GAA/B,kFACCW,EADD,iBACmBX,EADnB,8BAGoBC,EAASQ,IAAIE,GAHjC,uBAGK3B,EAHL,EAGKA,KAHL,kBAIIA,GAJJ,2HAUA,SAAe6B,EAAtB,iDAAO,OAAP,oBAAO,WAA2BC,EAAaN,GAAxC,gFACCG,EADD,8BACgCG,GADhC,kBAGgBb,EAASQ,IAAIE,EAAO,CACrCP,OAAQ,CACNI,KAAAA,KALD,cAGGxB,EAHH,yBAQIA,GARJ,2H","sources":["components/Reviews/Reviews.jsx","shared/Api.js"],"sourcesContent":["import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieReviews } from 'shared/Api';\n\nconst Reviews = () => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n\n    const {movieId} = useParams();\n\n    useEffect(()=> {\n        const getData = async () => {\n            try{\n                setLoading(true);\n                const {results} = await getMovieReviews(movieId);\n                setData(results);\n                setLoading(false);\n            } catch(err) {\n                console.log(err);\n            } finally {\n                setLoading(false);\n            }\n        };\n        getData();\n    }, [movieId]);\n    return (\n        <>\n          {loading ? (\n            'Loading...'\n          ) : data && data.length > 0 ? (\n            <div>\n              <ul>\n                {data.map(({ author, content, id }) => (\n                  <li key={id}>\n                    <p>{author}</p>\n                    {content && content}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          ) : (\n            <p>No reviews found</p>\n          )}\n        </>\n      );\n    };\n    \n    export default Reviews;","import axios from \"axios\";\n\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n    params:{\n        api_key: '127f931aa0380a7517b82d65a9bb91e0',\n        language: 'en-US'\n    },\n});\n\nexport async function getTrendingMovies(page) {\n    const query = `/trending/movie/week`;\n    try {\n      const { data } = await instance.get(query, {\n        params: {\n          page,\n        },\n      });\n  \n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  export async function getMovieDetails(id) {\n    const query = `/movie/${id}`;\n    try {\n      const { data } = await instance.get(query);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  export async function getMovieCast(id) {\n    const query = `/movie/${id}/credits`;\n    try {\n      const { data } = await instance.get(query);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  export async function getMovieReviews(id) {\n    const query = `/movie/${id}/reviews`;\n    try {\n      const { data } = await instance.get(query);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }\n  \n  export async function searchMovie(queryString, page) {\n    const query = `/search/movie?query=${queryString}`;\n    try {\n      const data = await instance.get(query, {\n        params: {\n          page,\n        },\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  }"],"names":["useState","data","setData","loading","setLoading","movieId","useParams","useEffect","getData","getMovieReviews","results","console","log","length","map","author","content","id","instance","axios","baseURL","params","api_key","language","getTrendingMovies","page","get","getMovieDetails","query","getMovieCast","searchMovie","queryString"],"sourceRoot":""}